// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package company

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateCompanyReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Descriptioon         string   `protobuf:"bytes,2,opt,name=descriptioon,proto3" json:"descriptioon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCompanyReq) Reset()         { *m = CreateCompanyReq{} }
func (m *CreateCompanyReq) String() string { return proto.CompactTextString(m) }
func (*CreateCompanyReq) ProtoMessage()    {}
func (*CreateCompanyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *CreateCompanyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCompanyReq.Unmarshal(m, b)
}
func (m *CreateCompanyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCompanyReq.Marshal(b, m, deterministic)
}
func (m *CreateCompanyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCompanyReq.Merge(m, src)
}
func (m *CreateCompanyReq) XXX_Size() int {
	return xxx_messageInfo_CreateCompanyReq.Size(m)
}
func (m *CreateCompanyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCompanyReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCompanyReq proto.InternalMessageInfo

func (m *CreateCompanyReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCompanyReq) GetDescriptioon() string {
	if m != nil {
		return m.Descriptioon
	}
	return ""
}

type CreateCompanyRes struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCompanyRes) Reset()         { *m = CreateCompanyRes{} }
func (m *CreateCompanyRes) String() string { return proto.CompactTextString(m) }
func (*CreateCompanyRes) ProtoMessage()    {}
func (*CreateCompanyRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *CreateCompanyRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCompanyRes.Unmarshal(m, b)
}
func (m *CreateCompanyRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCompanyRes.Marshal(b, m, deterministic)
}
func (m *CreateCompanyRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCompanyRes.Merge(m, src)
}
func (m *CreateCompanyRes) XXX_Size() int {
	return xxx_messageInfo_CreateCompanyRes.Size(m)
}
func (m *CreateCompanyRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCompanyRes.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCompanyRes proto.InternalMessageInfo

func (m *CreateCompanyRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CreateCompanyRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateCompanyReq)(nil), "company.CreateCompanyReq")
	proto.RegisterType((*CreateCompanyRes)(nil), "company.CreateCompanyRes")
}

func init() {
	proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626)
}

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xce, 0xcf, 0x2d, 0x48,
	0xcc, 0xab, 0x54, 0xf2, 0xe2, 0x12, 0x70, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x75, 0x86, 0x08, 0x04,
	0xa5, 0x16, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x42, 0x4a, 0x5c, 0x3c, 0x29, 0xa9, 0xc5, 0xc9, 0x45, 0x99, 0x05, 0x25, 0x99,
	0xf9, 0xf9, 0x79, 0x12, 0x4c, 0x60, 0x39, 0x14, 0x31, 0x25, 0x2b, 0x0c, 0xb3, 0x8a, 0x85, 0xc4,
	0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0xc1, 0xa6, 0x71, 0x04, 0x41, 0x79, 0x42, 0x7c,
	0x5c, 0x4c, 0x99, 0x29, 0x50, 0x53, 0x98, 0x32, 0x53, 0x8c, 0x82, 0xb8, 0xd8, 0xa1, 0xba, 0x84,
	0xdc, 0xb9, 0x78, 0x51, 0x8c, 0x11, 0x92, 0xd4, 0x83, 0xba, 0x56, 0x0f, 0xdd, 0xa9, 0x52, 0x38,
	0xa5, 0x8a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x7e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc2,
	0xeb, 0x4f, 0x95, 0xfc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyClient interface {
	CreateCompany(ctx context.Context, in *CreateCompanyReq, opts ...grpc.CallOption) (*CreateCompanyRes, error)
}

type companyClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyClient(cc grpc.ClientConnInterface) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) CreateCompany(ctx context.Context, in *CreateCompanyReq, opts ...grpc.CallOption) (*CreateCompanyRes, error) {
	out := new(CreateCompanyRes)
	err := c.cc.Invoke(ctx, "/company.Company/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
type CompanyServer interface {
	CreateCompany(context.Context, *CreateCompanyReq) (*CreateCompanyRes, error)
}

// UnimplementedCompanyServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServer struct {
}

func (*UnimplementedCompanyServer) CreateCompany(ctx context.Context, req *CreateCompanyReq) (*CreateCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}

func RegisterCompanyServer(s *grpc.Server, srv CompanyServer) {
	s.RegisterService(&_Company_serviceDesc, srv)
}

func _Company_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.Company/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).CreateCompany(ctx, req.(*CreateCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Company_serviceDesc = grpc.ServiceDesc{
	ServiceName: "company.Company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _Company_CreateCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
