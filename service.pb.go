// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package company

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}

var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}

func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7, 0}
}

type Range struct {
	Min                  int64    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Range) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type Pagination struct {
	Skip                 string   `protobuf:"bytes,1,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetSkip() string {
	if m != nil {
		return m.Skip
	}
	return ""
}

func (m *Pagination) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Company struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedBy            string               `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Url                  string               `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Logo                 string               `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Location             string               `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	FoundedYear          string               `protobuf:"bytes,7,opt,name=founded_year,json=foundedYear,proto3" json:"founded_year,omitempty"`
	NoOfEmployees        *Range               `protobuf:"bytes,8,opt,name=no_of_employees,json=noOfEmployees,proto3" json:"no_of_employees,omitempty"`
	Description          string               `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	LastActive           *timestamp.Timestamp `protobuf:"bytes,11,opt,name=last_active,json=lastActive,proto3" json:"last_active,omitempty"`
	HiringStatus         bool                 `protobuf:"varint,12,opt,name=hiring_status,json=hiringStatus,proto3" json:"hiring_status,omitempty"`
	Skills               []string             `protobuf:"bytes,13,rep,name=skills,proto3" json:"skills,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *Company) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Company.Unmarshal(m, b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Company.Marshal(b, m, deterministic)
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return xxx_messageInfo_Company.Size(m)
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Company) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Company) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Company) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Company) GetFoundedYear() string {
	if m != nil {
		return m.FoundedYear
	}
	return ""
}

func (m *Company) GetNoOfEmployees() *Range {
	if m != nil {
		return m.NoOfEmployees
	}
	return nil
}

func (m *Company) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Company) GetLastActive() *timestamp.Timestamp {
	if m != nil {
		return m.LastActive
	}
	return nil
}

func (m *Company) GetHiringStatus() bool {
	if m != nil {
		return m.HiringStatus
	}
	return false
}

func (m *Company) GetSkills() []string {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *Company) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Company) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CompanyAllResponse struct {
	Companies            []*Company `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CompanyAllResponse) Reset()         { *m = CompanyAllResponse{} }
func (m *CompanyAllResponse) String() string { return proto.CompactTextString(m) }
func (*CompanyAllResponse) ProtoMessage()    {}
func (*CompanyAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *CompanyAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompanyAllResponse.Unmarshal(m, b)
}
func (m *CompanyAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompanyAllResponse.Marshal(b, m, deterministic)
}
func (m *CompanyAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompanyAllResponse.Merge(m, src)
}
func (m *CompanyAllResponse) XXX_Size() int {
	return xxx_messageInfo_CompanyAllResponse.Size(m)
}
func (m *CompanyAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompanyAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompanyAllResponse proto.InternalMessageInfo

func (m *CompanyAllResponse) GetCompanies() []*Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

// health report
type HealthCheckRequest struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type HealthCheckResponse struct {
	Status               HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=company.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_UNKNOWN
}

func init() {
	proto.RegisterEnum("company.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
	proto.RegisterType((*Range)(nil), "company.Range")
	proto.RegisterType((*Pagination)(nil), "company.Pagination")
	proto.RegisterType((*Company)(nil), "company.Company")
	proto.RegisterType((*Empty)(nil), "company.Empty")
	proto.RegisterType((*Id)(nil), "company.Id")
	proto.RegisterType((*CompanyAllResponse)(nil), "company.CompanyAllResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "company.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "company.HealthCheckResponse")
}

func init() {
	proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626)
}

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xdf, 0x4f, 0xdb, 0x3c,
	0x14, 0xfd, 0xd2, 0xd2, 0x96, 0xde, 0x90, 0x52, 0x19, 0xf4, 0xc9, 0x2a, 0xdf, 0xa7, 0x75, 0xd9,
	0x4b, 0xf7, 0x43, 0x61, 0xea, 0x24, 0xa4, 0x6d, 0x4f, 0xa5, 0xa0, 0x0d, 0x4d, 0x2a, 0x93, 0x0b,
	0x43, 0x7b, 0xaa, 0x4c, 0xe2, 0xb6, 0x16, 0x49, 0x9c, 0xc5, 0x2e, 0x22, 0x7f, 0xc8, 0xf6, 0xcf,
	0xee, 0x65, 0x8a, 0xe3, 0xb4, 0x14, 0xd0, 0x98, 0xb4, 0x37, 0xdf, 0xe3, 0x73, 0xce, 0xbd, 0x39,
	0x37, 0x06, 0x47, 0xb2, 0xf4, 0x9a, 0xfb, 0xcc, 0x4b, 0x52, 0xa1, 0x04, 0x6a, 0xf8, 0x22, 0x4a,
	0x68, 0x9c, 0x75, 0x9e, 0xcc, 0x84, 0x98, 0x85, 0x6c, 0x5f, 0xc3, 0x97, 0x8b, 0xe9, 0xbe, 0xe2,
	0x11, 0x93, 0x8a, 0x46, 0x49, 0xc1, 0x74, 0x5f, 0x42, 0x8d, 0xd0, 0x78, 0xc6, 0x50, 0x1b, 0xaa,
	0x11, 0x8f, 0xb1, 0xd5, 0xb5, 0x7a, 0x55, 0x92, 0x1f, 0x35, 0x42, 0x6f, 0x70, 0xc5, 0x20, 0xf4,
	0xc6, 0x3d, 0x00, 0xf8, 0x4c, 0x67, 0x3c, 0xa6, 0x8a, 0x8b, 0x18, 0x21, 0xd8, 0x90, 0x57, 0x3c,
	0xd1, 0x92, 0x26, 0xd1, 0x67, 0xb4, 0x0b, 0xb5, 0x90, 0x47, 0x5c, 0x19, 0x55, 0x51, 0xb8, 0x3f,
	0xab, 0xd0, 0x18, 0x16, 0x13, 0xa1, 0x16, 0x54, 0x78, 0x60, 0x34, 0x15, 0x1e, 0xe4, 0x2e, 0x31,
	0x8d, 0x98, 0x16, 0x34, 0x89, 0x3e, 0xa3, 0xff, 0x01, 0xfc, 0x94, 0x51, 0xc5, 0x82, 0xc9, 0x65,
	0x86, 0xab, 0xfa, 0xa6, 0x69, 0x90, 0xc3, 0x2c, 0x1f, 0x6c, 0x91, 0x86, 0x78, 0x43, 0xe3, 0xf9,
	0x31, 0x37, 0x09, 0xc5, 0x4c, 0xe0, 0x5a, 0x61, 0x92, 0x9f, 0x51, 0x07, 0x36, 0x43, 0xe1, 0xeb,
	0x51, 0x71, 0x5d, 0xe3, 0xcb, 0x1a, 0x3d, 0x85, 0xad, 0xa9, 0x58, 0xc4, 0x01, 0x0b, 0x26, 0x19,
	0xa3, 0x29, 0x6e, 0xe8, 0x7b, 0xdb, 0x60, 0x5f, 0x19, 0x4d, 0xd1, 0x01, 0x6c, 0xc7, 0x62, 0x22,
	0xa6, 0x13, 0x16, 0x25, 0xa1, 0xc8, 0x18, 0x93, 0x78, 0xb3, 0x6b, 0xf5, 0xec, 0x7e, 0xcb, 0x33,
	0xe1, 0x7a, 0x3a, 0x38, 0xe2, 0xc4, 0xe2, 0x74, 0x7a, 0x5c, 0x92, 0x50, 0x17, 0xec, 0x80, 0x49,
	0x3f, 0xe5, 0x89, 0xee, 0x0c, 0x85, 0xf3, 0x2d, 0x08, 0xbd, 0x07, 0x3b, 0xa4, 0x52, 0x4d, 0xa8,
	0xaf, 0xf8, 0x35, 0xc3, 0xb6, 0x76, 0xed, 0x78, 0xc5, 0xa6, 0xbc, 0x72, 0x53, 0xde, 0x59, 0xb9,
	0x29, 0x02, 0x39, 0x7d, 0xa0, 0xd9, 0xe8, 0x19, 0x38, 0x73, 0x9e, 0xf2, 0x78, 0x36, 0x91, 0x8a,
	0xaa, 0x85, 0xc4, 0x5b, 0x5d, 0xab, 0xb7, 0x49, 0xb6, 0x0a, 0x70, 0xac, 0x31, 0xf4, 0x2f, 0xd4,
	0xe5, 0x15, 0x0f, 0x43, 0x89, 0x9d, 0x6e, 0xb5, 0xd7, 0x24, 0xa6, 0x42, 0x6f, 0x57, 0xb9, 0x52,
	0x85, 0x5b, 0x8f, 0x36, 0x2e, 0x33, 0x1f, 0xa8, 0x5c, 0xba, 0x48, 0x82, 0x52, 0xba, 0xfd, 0xb8,
	0xd4, 0xb0, 0x07, 0xca, 0x6d, 0x40, 0xed, 0x38, 0x4a, 0x54, 0xe6, 0xee, 0x42, 0xe5, 0x24, 0xb8,
	0xfb, 0x03, 0xb8, 0x47, 0x80, 0xcc, 0xbf, 0x31, 0x08, 0x43, 0xc2, 0x64, 0x22, 0x62, 0xc9, 0x90,
	0x07, 0xcd, 0x22, 0x66, 0xce, 0x24, 0xb6, 0xba, 0xd5, 0x9e, 0xdd, 0x6f, 0x2f, 0x83, 0x37, 0x7c,
	0xb2, 0xa2, 0xb8, 0x1e, 0xa0, 0x8f, 0x8c, 0x86, 0x6a, 0x3e, 0x9c, 0x33, 0xff, 0x8a, 0xb0, 0x6f,
	0x0b, 0x26, 0x15, 0xc2, 0xd0, 0x30, 0x0f, 0xc3, 0x34, 0x2c, 0x4b, 0xf7, 0xbb, 0x05, 0x3b, 0x6b,
	0x02, 0xd3, 0xf7, 0x10, 0xea, 0x26, 0xd8, 0x5c, 0xd0, 0xea, 0xbf, 0x58, 0x36, 0x7d, 0x80, 0xed,
	0x8d, 0x73, 0xb7, 0x32, 0x76, 0x62, 0x94, 0xee, 0x3b, 0x70, 0xd6, 0x2e, 0x90, 0x0d, 0x8d, 0xf3,
	0xd1, 0xa7, 0xd1, 0xe9, 0xc5, 0xa8, 0xfd, 0x4f, 0x5e, 0x8c, 0x8f, 0xc9, 0x97, 0x93, 0xd1, 0x87,
	0xb6, 0x85, 0xb6, 0xc1, 0x1e, 0x9d, 0x9e, 0x4d, 0x4a, 0xa0, 0xd2, 0xff, 0x51, 0x85, 0x96, 0xf9,
	0xbc, 0x71, 0x31, 0x2a, 0xf2, 0xc0, 0x19, 0xea, 0x3d, 0x94, 0x4f, 0xe8, 0x5e, 0x10, 0x1d, 0x7b,
	0x89, 0x9c, 0x04, 0x68, 0x00, 0x0e, 0x61, 0x34, 0x18, 0x96, 0xd9, 0xa0, 0x9d, 0xe5, 0xed, 0xea,
	0xf5, 0x76, 0xf6, 0xee, 0x9a, 0xdc, 0x4e, 0xff, 0x15, 0xd8, 0x2b, 0x8b, 0x0c, 0xdd, 0xb6, 0xef,
	0xdc, 0xeb, 0x9e, 0x0f, 0x78, 0xae, 0xb7, 0xfd, 0x87, 0x03, 0x3e, 0x07, 0xe7, 0x88, 0x85, 0x6c,
	0xc5, 0x5f, 0xf3, 0x5f, 0xa3, 0x1e, 0x42, 0x4d, 0x27, 0x8e, 0xf6, 0x1e, 0xde, 0x83, 0x5e, 0x73,
	0xe7, 0xbf, 0xdf, 0x2d, 0x09, 0x1d, 0x41, 0xed, 0x82, 0x2a, 0x7f, 0xfe, 0x17, 0x1e, 0xaf, 0xad,
	0xcb, 0xba, 0xfe, 0xc9, 0xdf, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x54, 0x58, 0x3c, 0x6a,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyServiceClient interface {
	CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Id, error)
	ReadCompanies(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*CompanyAllResponse, error)
	ReadCompany(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Id, error)
	DeleteCompany(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error)
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (CompanyService_WatchClient, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ReadCompanies(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*CompanyAllResponse, error) {
	out := new(CompanyAllResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/ReadCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ReadCompany(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/company.CompanyService/ReadCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/company.CompanyService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteCompany(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/company.CompanyService/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (CompanyService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CompanyService_serviceDesc.Streams[0], "/company.CompanyService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &companyServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompanyService_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type companyServiceWatchClient struct {
	grpc.ClientStream
}

func (x *companyServiceWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompanyServiceServer is the server API for CompanyService service.
type CompanyServiceServer interface {
	CreateCompany(context.Context, *Company) (*Id, error)
	ReadCompanies(context.Context, *Pagination) (*CompanyAllResponse, error)
	ReadCompany(context.Context, *Id) (*Company, error)
	UpdateCompany(context.Context, *Company) (*Id, error)
	DeleteCompany(context.Context, *Id) (*Id, error)
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, CompanyService_WatchServer) error
}

// UnimplementedCompanyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (*UnimplementedCompanyServiceServer) CreateCompany(ctx context.Context, req *Company) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) ReadCompanies(ctx context.Context, req *Pagination) (*CompanyAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCompanies not implemented")
}
func (*UnimplementedCompanyServiceServer) ReadCompany(ctx context.Context, req *Id) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) UpdateCompany(ctx context.Context, req *Company) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) DeleteCompany(ctx context.Context, req *Id) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (*UnimplementedCompanyServiceServer) Check(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedCompanyServiceServer) Watch(req *HealthCheckRequest, srv CompanyService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ReadCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ReadCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/ReadCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ReadCompanies(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ReadCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ReadCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/ReadCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ReadCompany(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteCompany(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServiceServer).Watch(m, &companyServiceWatchServer{stream})
}

type CompanyService_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type companyServiceWatchServer struct {
	grpc.ServerStream
}

func (x *companyServiceWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyService_CreateCompany_Handler,
		},
		{
			MethodName: "ReadCompanies",
			Handler:    _CompanyService_ReadCompanies_Handler,
		},
		{
			MethodName: "ReadCompany",
			Handler:    _CompanyService_ReadCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _CompanyService_DeleteCompany_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _CompanyService_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _CompanyService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
